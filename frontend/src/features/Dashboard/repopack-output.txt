This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-11-23T23:13:19.115Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
components/
  CodeAnalysis.tsx
  CodeEditor.tsx
  CompilerOutput.tsx
  ImageViewer.tsx
  LanguageDropdown.tsx
  LoadingState.tsx
  TabView.tsx
  ZoomControls.tsx
hooks/
  useCompiler.tsx
  useImageProcessing.tsx
  useSessionManager.tsx
  useTestGeneration.tsx
index.tsx

================================================================
Repository Files
================================================================

================
File: components/CodeAnalysis.tsx
================
import { useMemo } from "react";
import { Card, CardContent } from "@/components/ui/card";
import {
    Code,
    Hash,
    FileCode,
    LucideGitCommit,
    Braces,
    BarChart
} from "lucide-react";

interface CodeAnalysisProps {
    code?: string;
    language?: string;
}

interface MetricItem {
    icon: any;
    label: string;
    value: string | number;
}

const useCodeMetrics = (code: string = '') => {
    return useMemo(() => {
        const lines = code.split('\n');
        const nonEmptyLines = lines.filter(line => line.trim().length > 0);
        const commentLines = lines.filter(line => {
            const trimmed = line.trim();
            return (
                trimmed.startsWith('//') ||
                trimmed.startsWith('#') ||
                trimmed.startsWith('/*') ||
                trimmed.startsWith('*')
            );
        });

        const complexityScore = Math.min(100, Math.round(
            (nonEmptyLines.length * 2) +
            (code.split('if').length * 3) +
            (code.split('for').length * 4) +
            (code.split('while').length * 4) +
            (code.split('try').length * 2)
        ));

        return {
            totalLines: lines.length,
            codeLines: nonEmptyLines.length,
            commentLines: commentLines.length,
            characters: code.length,
            functions: (code.match(/function|def|\w+\s*\([^)]*\)\s*{/g) || []).length,
            complexity: complexityScore
        };
    }, [code]);
};

export const CodeAnalysis = ({ code = '', language = '' }: CodeAnalysisProps) => {
    const stats = useCodeMetrics(code);

    const metrics: MetricItem[] = [
        { icon: FileCode, label: "Total Lines", value: stats.totalLines },
        { icon: Code, label: "Code Lines", value: stats.codeLines },
        { icon: Hash, label: "Comments", value: stats.commentLines },
        { icon: LucideGitCommit, label: "Functions", value: stats.functions },
        { icon: Braces, label: "Characters", value: stats.characters },
        { icon: BarChart, label: "Complexity", value: `${stats.complexity}/100` }
    ];

    return (
        <div className="grid grid-cols-2 lg:grid-cols-3 gap-4 p-6">
            {metrics.map((metric, index) => (
                <Card key={index} className="bg-white dark:bg-neutral-900">
                    <CardContent className="pt-6">
                        <div className="flex flex-col space-y-2">
                            <div className="flex items-center space-x-2 text-neutral-500">
                                <metric.icon className="h-4 w-4" />
                                <span className="text-sm font-medium">{metric.label}</span>
                            </div>
                            <span className="text-2xl font-bold">{metric.value}</span>
                        </div>
                    </CardContent>
                </Card>
            ))}
        </div>
    );
};

================
File: components/CodeEditor.tsx
================
import { Button } from '@/components/ui/button';
import CodeEditor from '@/components/CodeEditor/CodeEditor';
import LanguageDropdown from './LanguageDropdown';
import { LanguageDrop } from './LanguageDropdown';


interface CodeEditorSectionProps {
    language: string;
    code: string;
    isCompiling: boolean;
    handleLanguageSelect: (language: LanguageDrop) => void;
    onCodeChange: (code: string) => void;
    onRun: () => void;
    makeTests: () => void;
}


export const CodeEditorSection = ({
    language,
    code,
    handleLanguageSelect,
    isCompiling,
    onCodeChange,
    onRun,
    makeTests
}: CodeEditorSectionProps) => {

    return (
        <div className="flex flex-col h-full">
            <div className="flex items-center justify-between px-4 min-h-[3.5rem] py-2 border-b bg-white dark:bg-neutral-900">
                <LanguageDropdown language={language} onSelect={handleLanguageSelect}/>
                <div className="flex gap-2">
                    <Button
                        onClick={onRun}
                        disabled={isCompiling}
                        className="bg-green-600 hover:bg-green-700 text-white"
                        size="sm"
                    >
                        Run
                    </Button>
                    <Button
                        onClick={makeTests}
                        variant="outline"
                        size="sm"
                        disabled={isCompiling}
                    >
                        Generate Tests
                    </Button>
                </div>
            </div>
            <div className="flex-1">
                <CodeEditor
                    language={language}
                    code={code}
                    onChange={onCodeChange}
                />
            </div>
        </div>
    );
};

================
File: components/CompilerOutput.tsx
================
import { ChevronDown, ChevronUp, X } from 'lucide-react';
import CompilerCode from '@/components/CompileCode/CompileCode';
import { Button } from '@/components/ui/button';
import { cn } from '@/lib/utils';

interface CompilerOutputProps {
    output: string;
    isExpanded: boolean;
    onToggle: () => void;
}

export const CompilerOutput = ({ output, isExpanded, onToggle }: CompilerOutputProps) => {
    return (
        <div className={cn(
            "border-t border-neutral-400 bg-neutral-100 transition-all duration-200",
            isExpanded ? "h-1/4" : "h-[40px]"
        )}>
            <div className="flex items-center justify-between px-4 py-2 border-b border-neutral-400">
                <div className="flex items-center gap-2">
                    <Button
                        variant="ghost"
                        size="icon"
                        className="h-6 w-6"
                        onClick={onToggle}
                    >
                        {isExpanded ?
                            <ChevronDown className="h-4 w-4" /> :
                            <ChevronUp className="h-4 w-4" />
                        }
                    </Button>
                    <span className="text-sm text-gray-600 font-medium">Compiler output</span>
                </div>
            </div>
            {isExpanded && (
                <div className="h-[calc(100%-40px)]">
                    <CompilerCode compilerOutput={output} />
                </div>
            )}
        </div>
    );
};

================
File: components/ImageViewer.tsx
================
import { cn } from "@/lib/utils";

interface ImageViewerProps {
    imageUrl: string;
    zoom: number;
    className?: string;
}

export const ImageViewer = ({ imageUrl, zoom, className }: ImageViewerProps) => {
    return (
        <div className="relative w-full overflow-hidden bg-gray-50">
            <div
                className="min-h-[200px] flex items-center justify-center p-4 overflow-auto"
                style={{
                    height: 'calc(100vh - 300px)',
                    maxHeight: '800px'
                }}
            >
                <div className={cn(
                    "relative transition-transform duration-200 ease-out",
                    className
                )}>
                    <img
                        src={imageUrl}
                        alt="Document Image"
                        className="max-w-none object-contain rounded-lg shadow-md"
                        style={{
                            transform: `scale(${zoom})`,
                            transformOrigin: 'center center',
                            width: 'auto',
                            height: 'auto',
                            maxHeight: 'calc(100vh - 400px)',
                            maxWidth: zoom === 1 ? '100%' : 'none'
                        }}
                        loading="lazy"
                    />
                </div>
            </div>
        </div>
    );
};

================
File: components/LanguageDropdown.tsx
================
import React from 'react';
import { Language } from '@/types/types';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { cn } from '@/lib/utils';

export interface LanguageDrop {
  id: Language | undefined;
  name: string;
  icon?: string;
}

export interface LanguageDropdownProps {
  language?: string;
  onSelect?: (language: LanguageDrop) => void;
  disabled?: boolean;
  className?: string;

}

const languages: LanguageDrop[] = [
  { id: Language.python, name: 'Python' },
  { id: Language.c, name: 'C' },
  { id: Language.bash, name: 'Bash' },
  { id: Language.java, name: 'Java' },
];

const LanguageDropdown: React.FC<LanguageDropdownProps> = ({
  language,
  onSelect,
  disabled = false,
  className
}) => {
  const handleValueChange = (value: string) => {
    const selectedLanguage = languages.find(lang => lang.id === value);
    if (selectedLanguage) {
      onSelect?.(selectedLanguage);
    }
  };

  return (
    <div>
      <Select
        value={language}
        onValueChange={handleValueChange}
        disabled={disabled}
      >
        <SelectTrigger
          className={cn(
            "w-64 h-9 px-3 py-2",
            "bg-white dark:bg-neutral-900",
            "border-gray-200 dark:border-neutral-800",
            "hover:bg-gray-50 dark:hover:bg-neutral-800",
            className
          )}
        >
          <SelectValue placeholder="Select language" />
        </SelectTrigger>
        <SelectContent>
          {languages.map((lang) => (
            <SelectItem
              key={lang.id}
              value={lang.id || ''}
              className="h-9"
            >
              <div className="flex items-center justify-between">
                {lang.name}
              </div>
            </SelectItem>
          ))}
        </SelectContent>
      </Select>
    </div>
  );
};

export default LanguageDropdown;

================
File: components/LoadingState.tsx
================
import { Skeleton } from "@/components/ui/skeleton";
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";

export const LoadingState = () => {
    return (
        <div className="flex flex-col h-full">
            {/* Main content */}
            <div className="grid grid-cols-2 divide-x divide-neutral-800 bg-neutral-100 h-[calc(100%-400px)]">
                {/* Left side */}
                <div className="flex flex-col h-full">
                    {/* Tabs and content */}
                    <div className="flex-1 min-h-0">
                        <div className="flex justify-between items-center border-b border-neutral-800 px-2">
                            <Tabs>
                                <TabsList className="rounded-none border-0 bg-transparent h-10">
                                    <TabsTrigger
                                        value="document"
                                        className="rounded-none data-[state=active]:border-b-2 data-[state=active]:border-primary"
                                        disabled
                                    >
                                        Document viewer
                                    </TabsTrigger>
                                    <TabsTrigger
                                        value="problem"
                                        className="rounded-none data-[state=active]:border-b-2 data-[state=active]:border-primary"
                                        disabled
                                    >
                                        Problem
                                    </TabsTrigger>
                                </TabsList>
                            </Tabs>
                            <div className="flex gap-1 p-1">
                                <Skeleton className="h-8 w-8 rounded" />
                                <Skeleton className="h-8 w-8 rounded" />
                                <Skeleton className="h-8 w-8 rounded" />
                            </div>
                        </div>
                        <div className="p-4">
                            <Skeleton className="w-full h-[calc(100vh-500px)] rounded-lg" />
                        </div>
                    </div>
                </div>

                {/* Right side - Code Editor */}
                <div className="h-full">
                    <div className="flex flex-col h-full">
                        <div className="flex items-center justify-between px-4 py-2 border-b border-neutral-800">
                            <Skeleton className="h-4 w-[100px]" />
                            <div className="flex gap-2">
                                <Skeleton className="h-8 w-16" />
                                <Skeleton className="h-8 w-24" />
                            </div>
                        </div>
                        <div className="flex-1 p-4">
                            <Skeleton className="w-full h-full" />
                        </div>
                    </div>
                </div>
            </div>

            {/* Compiler Output */}
            <div className="h-[300px] border-t border-neutral-800 bg-[#1e1e1e]">
                <div className="flex items-center justify-between px-4 py-2 border-b border-neutral-800">
                    <div className="flex items-center gap-2">
                        <Skeleton className="h-6 w-6" />
                        <Skeleton className="h-4 w-[120px]" />
                    </div>
                    <Skeleton className="h-6 w-6" />
                </div>
                <div className="p-4">
                    <Skeleton className="w-full h-[230px]" />
                </div>
            </div>
        </div>
    );
};

================
File: components/TabView.tsx
================
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs";
import {
    ZoomIn,
    ZoomOut,
    Maximize2,
    FileText,
    Code2,
    BarChart
} from "lucide-react";
import { useState } from "react";
import { cn } from "@/lib/utils";
import { ImageViewer } from "./ImageViewer";
import { ZoomControls } from "./ZoomControls";
import { CodeAnalysis } from "./CodeAnalysis";
import { Language } from "@/types/types";

interface TabViewProps {
    imageUrl: string;
    problemStatement?: string;
    code?: string;
    language?: Language;
    prompt?: string;
}

export const TabView = ({ imageUrl, problemStatement, code, language, prompt }: TabViewProps) => {
    const [zoom, setZoom] = useState(1);

    return (
        <Tabs defaultValue="document" className="h-full flex flex-col overflow-hidden">
            <div className="shrink-0 h-14 border-b border-gray-200 flex items-center justify-between bg-white">
                <nav className="flex h-full" aria-label="Tabs">
                    <TabsList className="h-full px-0 border-0 bg-transparent">
                        <TabsTrigger
                            value="document"
                            className={cn(
                                "relative h-14 px-4",
                                "inline-flex gap-2 text-sm font-medium",
                                "before:absolute before:inset-x-0 before:bottom-0 before:h-0.5",
                                "data-[state=active]:before:bg-indigo-600",
                                "data-[state=active]:text-indigo-600",
                                "data-[state=active]:bg-indigo-50/40",
                                "data-[state=inactive]:text-gray-500",
                                "data-[state=inactive]:hover:text-gray-700",
                                "data-[state=inactive]:hover:bg-gray-50"
                            )}
                        >
                            <FileText className="h-5 w-5" />
                            Document
                        </TabsTrigger>
                        <TabsTrigger
                            value="analysis"
                            className={cn(/* ... same classes ... */)}
                        >
                            <BarChart className="h-5 w-5" />
                            Code Analysis
                        </TabsTrigger>
                    </TabsList>
                </nav>
                <ZoomControls zoom={zoom} setZoom={setZoom} />
            </div>

            <TabsContent
                value="document"
                className="h-[calc(100%-3.5rem)] m-0 flex flex-col overflow-hidden"
            >
                {prompt && (
                    <div className="shrink-0 bg-white border-b border-gray-200">
                        <div className="max-w-3xl mx-auto px-4 py-4">
                            <div className="flex items-center gap-2 mb-2">
                                <FileText className="h-5 w-5 text-indigo-600" />
                                <h2 className="text-sm font-medium text-gray-500">Prompt</h2>
                            </div>
                            <p className="text-lg text-gray-800 leading-relaxed">
                                {prompt}
                            </p>
                        </div>
                    </div>
                )}

                {imageUrl && (
                    <div className="flex-1 overflow-auto bg-gray-50">
                        <ImageViewer
                            imageUrl={imageUrl}
                            zoom={zoom}
                        />
                    </div>
                )}
            </TabsContent>

            <TabsContent
                value="analysis"
                className="h-[calc(100%-3.5rem)] m-0 overflow-auto"
            >
                <CodeAnalysis code={code} language={language} />
            </TabsContent>
        </Tabs>
    );
};

================
File: components/ZoomControls.tsx
================
import { Button } from "@/components/ui/button";
import { ZoomIn, ZoomOut, Maximize2 } from "lucide-react";

interface ZoomControlsProps {
    zoom: number;
    setZoom: (zoom: number) => void;
}

export const ZoomControls = ({ zoom, setZoom }: ZoomControlsProps) => (
    <div className="flex items-center gap-2 px-4">
        {[
            { icon: ZoomOut, action: () => setZoom(Math.max(0.1, zoom - 0.1)) },
            { icon: ZoomIn, action: () => setZoom(Math.min(2, zoom + 0.1)) },
            { icon: Maximize2, action: () => setZoom(1) }
        ].map(({ icon: Icon, action }, index) => (
            <Button
                key={index}
                variant="ghost"
                size="icon"
                onClick={action}
                className="h-9 w-9 text-gray-400 hover:text-gray-500"
            >
                <Icon className="h-4 w-4" />
            </Button>
        ))}
    </div>
);

================
File: hooks/useCompiler.tsx
================
import { useState } from 'react';
import { useMutation } from '@tanstack/react-query';
import { Language } from '@/types/types';

interface CompileResponse {
    stdout: string;
    stderr: string;
    error?: string;
    success: boolean;
}
interface CompileInput {
    code: string;
    language: Language | string;
}

export const useCompiler = () => {
    const [compilerOutput, setCompilerOutput] = useState<string>("");
    const [isCompiling, setIsCompiling] = useState<boolean>(false);
    const [isCompilerExpanded, setIsCompilerExpanded] = useState(true);
    const apiUrl = import.meta.env.VITE_API_URL;

    const compileMutation = useMutation({
        mutationFn: async ({ code, language }: CompileInput) => {
            const response = await fetch(apiUrl + 'compile', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ code, language })
            });
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            return response.json() as Promise<CompileResponse>;
        },
        onMutate: () => {
            setIsCompiling(true);
        },
        onSuccess: (data) => {
            console.log(data);
            if (data['success'] == true) {
                setCompilerOutput(data.stdout);
            } else if (data['success'] == false) {
                console.log("TEST");
                setCompilerOutput(data.error!);
            } 
 
        },
        onError: (error) => {
            console.error('Error compiling code:', error);
            setCompilerOutput("An error occurred while compiling.");
        },
        onSettled: () => {
            setIsCompiling(false);
        }
    });

    return {
        compilerOutput,
        isCompiling,
        isCompilerExpanded,
        setIsCompilerExpanded,
        setCompilerOutput,
        compile: compileMutation.mutate
    };
};

================
File: hooks/useImageProcessing.tsx
================
import { useState, useEffect } from 'react';
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { Language, Session, UpdateSessionInput } from '@/types/types';
import { supabase } from '@/supabaseClient';

interface UseImageProcessingProps {
    session: Session | undefined;
    sessionImage: any;
}
interface ProcessResponse {
    code: string;
    language: Language;
    concept?: string;
    summary: string;
}

export const useImageProcessing = ({
    session,
    sessionImage,
}: UseImageProcessingProps) => {
    const [imageUrl, setImageUrl] = useState<string>("");
    const apiUrl = import.meta.env.VITE_API_URL;
    const queryClient = useQueryClient();
    const processImageMutation = useMutation({
        mutationFn: async (imgUrl: string) => {
            // Call to ML API for code detection
            const response = await fetch(apiUrl + 'imgtocode', {
                method: 'POST',
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ img_url: imgUrl })
            });

            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            return response.json() as Promise<ProcessResponse>;
        },
        onSuccess: async (data) => {
            try {
                const detectedLanguage = data.language.toLowerCase() as Language;

                // Update session in Supabase
                const { error } = await supabase
                    .from('sessions')
                    .update({
                        code: data.code,
                        detected_code: data.code,
                        summary: data.summary,
                        language: detectedLanguage,
                        concept: data.concept,
                        status: 'completed'
                    })
                    .eq('id', session!.id);

                if (error) throw error;

                // Invalidate React Query cache to refresh UI
                queryClient.invalidateQueries({ queryKey: ['sessions', session?.id] });
            } catch (error) {
                console.error('Error updating session in Supabase:', error);
                throw error;
            }
        },
        onError: async (error) => {
            console.error('Error processing image:', error);

            // Update failure status in Supabase
            const { error: updateError } = await supabase
                .from('sessions')
                .update({ status: 'failed' })
                .eq('id', session!.id);

            if (updateError) {
                console.error('Error updating failure status:', updateError);
            }

            queryClient.invalidateQueries({ queryKey: ['sessions', session?.id] });
        }
    });

    useEffect(() => {
        const getSignedUrl = async () => {
            if (!sessionImage || !session?.user_id) return;

            try {
                const filePath = `${session.user_id}/${sessionImage.id}.${sessionImage.ext}`;
                const { data: urlData, error: urlError } = await supabase
                    .storage
                    .from('code-images')
                    .createSignedUrl(filePath, 3600);

                if (urlError) throw urlError;

                if (urlData?.signedUrl) {
                    setImageUrl(urlData.signedUrl);
                }
            } catch (error) {
                console.error('Error getting signed URL:', error);
            }
        };

        getSignedUrl();
    }, [sessionImage, session?.user_id]);

    useEffect(() => {
        if (imageUrl && session?.status === 'pending') {
            processImageMutation.mutate(imageUrl);
        }
    }, [imageUrl, session?.status]);

    const isProcessing = processImageMutation.isLoading;
    const error = processImageMutation.error;

    return {
        imageUrl,
        isProcessing,
        error
    };
};

================
File: hooks/useSessionManager.tsx
================
import { useState } from 'react';
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { updateSession } from '@/api';
import { Session, UpdateSessionInput } from '@/types/types';

export const useSessionManager = (sessionId: string) => {
    const queryClient = useQueryClient();
    const [editorCode, setEditorCode] = useState<string>("");

    const updateSessionMutation = useMutation({
        mutationFn: async (updates: Partial<Omit<UpdateSessionInput, 'id'>>) => {
            const updateData: UpdateSessionInput = {
                id: sessionId,
                ...updates
            };
            return updateSession(updateData);
        },
        onMutate: async (newData) => {
            await queryClient.cancelQueries({ queryKey: ['sessions', sessionId] });
            const previousSession = queryClient.getQueryData<Session>(['sessions', sessionId]);

            queryClient.setQueryData<Session>(['sessions', sessionId], old => ({
                ...old!,
                ...newData
            }));

            return { previousSession };
        },
        onError: (err, newData, context) => {
            queryClient.setQueryData(['sessions', sessionId], context?.previousSession);
            console.error('Failed to update session:', err);
        },
        onSettled: () => {
            queryClient.invalidateQueries({ queryKey: ['sessions', sessionId] });
        }
    });

    return {
        editorCode,
        setEditorCode,
        // The mutation async function is passed directly
        updateSession: updateSessionMutation.mutateAsync
    };
};

================
File: hooks/useTestGeneration.tsx
================
import { useState } from 'react';

interface UseTestsGenerationProps {
    sessionId: string;
    apiUrl: string;
    onSuccess: (code: string) => Promise<void>;
}

export const useTestsGeneration = ({ sessionId, apiUrl, onSuccess }: UseTestsGenerationProps) => {
    const [isGeneratingTests, setIsGeneratingTests] = useState(false);
    const [testsError, setTestsError] = useState<Error | null>(null);
    const isTestsError = !!testsError;

    const generateTests = async (code: string, language: string) => {
        setIsGeneratingTests(true);
        setTestsError(null);

        try {
            const response = await fetch(`${apiUrl}generatetests`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    language,
                    code
                }),
            });

            if (!response.ok) {
                throw new Error('Failed to generate tests');
            }

            const data = await response.json();
            await onSuccess(data.code);
        } catch (error) {
            setTestsError(error as Error);
            console.error('Error generating tests:', error);
        } finally {
            setIsGeneratingTests(false);
        }
    };

    return {
        generateTests,
        isGeneratingTests,
        testsError,
        isTestsError
    };
};

================
File: index.tsx
================
import { useSession, useSessionImage } from "@/api";
import { cn } from "@/lib/utils";
import { useParams } from "react-router-dom";
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { CodeEditorSection } from "./components/CodeEditor";
import { CompilerOutput } from "./components/CompilerOutput";
import { TabView } from "./components/TabView";
import { useCompiler } from "./hooks/useCompiler";
import { useImageProcessing } from "./hooks/useImageProcessing";
import { LanguageDrop } from "./components/LanguageDropdown";
import { supabase } from '@/supabaseClient';
import { Loader2 } from "lucide-react";
import { useTestsGeneration } from "./hooks/useTestGeneration";
import { useEffect, useState } from "react";
import { Language } from "@/types/types";
import LoadingAnimation from "@/components/LoadingAnimation";

const SessionDashboard = () => {
  const { sessionId } = useParams<{ sessionId: string }>();
  const apiUrl = import.meta.env.VITE_API_URL;
  const queryClient = useQueryClient();
  const [localCode, setLocalCode] = useState<string>('');

  // Session and Image Queries
  const {
    data: session,
    isLoading: isSessionLoading,
  } = useSession(sessionId!);

  const {
    data: sessionImage,
    isLoading: isImageLoading,
  } = useSessionImage(sessionId!);

  // Compiler State
  const {
    compilerOutput,
    isCompiling,
    isCompilerExpanded,
    setIsCompilerExpanded,
    compile
  } = useCompiler();

  const updateCode = async (newCode: string) => {
    setLocalCode(newCode);
    await updateSessionMutation.mutateAsync({
      field: 'code',
      value: newCode
    });
  };

  // Test gen
  const {
    generateTests,
    isGeneratingTests,
  } = useTestsGeneration({
    sessionId: sessionId!,
    apiUrl,
    onSuccess: async (newCode: string) => {
      await updateCode(newCode);
    }
  });

  // Image Processing
  const { imageUrl, isProcessing } = useImageProcessing({
    session,
    sessionImage,
  });

  // Session Update Mutation
  const updateSessionMutation = useMutation({
    mutationFn: async ({ field, value }: { field: string, value: any }) => {
      const { error } = await supabase
        .from('sessions')
        .update({ [field]: value })
        .eq('id', sessionId!);

      if (error) throw error;
    },
    onSuccess: () => {
      console.log('invalidating the query')
      queryClient.invalidateQueries({ queryKey: ['sessions', sessionId] });
    },
    onError: (error) => {
      console.error('Error updating session:', error);
    }
  });

  const handleLanguageChange = async (language: LanguageDrop) => {
    await updateSessionMutation.mutateAsync({
      field: 'language',
      value: language.id
    });
  };

  useEffect(() => {
    if (session?.code) {
      setLocalCode(session.code);
    }
  }, [session?.code]);

  const handleCodeChange = (newCode: string) => {
    setLocalCode(newCode);
  };

  const handleRunClick = async () => {
    if (!session?.language) return;

    // Update both local and DB
    await updateCode(localCode);

    // Run the compilation
    compile({
      code: localCode,
      language: session.language
    });
  };

  const handleMakeTests = () => {
    if (!localCode || !session?.language) return;
    generateTests(localCode, session.language);
  };

  // Loading States
  if (isSessionLoading || isImageLoading) {
    return <></>;
  }

  const showProcessingOverlay = isProcessing ||
    session?.status === 'pending' ||
    isGeneratingTests;


  return (
    <div className="flex flex-col h-full">
      <div className={cn(
        "grid grid-cols-2 divide-x divide-gray-200 transition-all duration-200",
        isCompilerExpanded ? 'h-[calc(100%-400px)]' : 'h-[calc(100%-40px)]'
      )}>
        <div className="flex flex-col h-full">
          <div className="flex-1 min-h-0 overflow-hidden">
            <TabView
              imageUrl={imageUrl}
              problemStatement={session!.prompt as any}
              code={localCode}
              language={session?.language as Language}
              prompt={session?.prompt as string}
            />
          </div>
        </div>
        <div className="h-full overflow-hidden">
          {showProcessingOverlay ? (
            <div className="relative h-full">
              <div className="absolute inset-0 bg-white/80 dark:bg-neutral-900/80 z-50 flex flex-col items-center justify-center gap-4">
                <p className="text-sm text-neutral-600 dark:text-neutral-400">
                  <LoadingAnimation />
                  {isGeneratingTests
                    ? "Generating tests..."
                    : "Processing image and detecting code..."
                  }
                </p>
              </div>
              <CodeEditorSection
                handleLanguageSelect={handleLanguageChange}
                language={session?.language!}
                code={localCode}
                isCompiling={isCompiling}
                onCodeChange={handleCodeChange}
                onRun={handleRunClick}
                makeTests={handleMakeTests}
              />
            </div>
          ) : (
            <CodeEditorSection
              handleLanguageSelect={handleLanguageChange}
              language={session?.language!}
              code={localCode}
              isCompiling={isCompiling}
              onCodeChange={handleCodeChange}
              onRun={handleRunClick}
              makeTests={handleMakeTests}
            />
          )}
        </div>
      </div>
      <CompilerOutput
        output={compilerOutput}
        isExpanded={isCompilerExpanded}
        onToggle={() => setIsCompilerExpanded(!isCompilerExpanded)}
      />
    </div>
  );
};

export default SessionDashboard;
