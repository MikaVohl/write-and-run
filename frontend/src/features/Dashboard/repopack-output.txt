This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-11-23T18:12:20.792Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
components/
  CodeEditor.tsx
  CompilerOutput.tsx
  LanguageDropdown.tsx
  LoadingState.tsx
  TabView.tsx
hooks/
  useCompiler.tsx
  useImageProcessing.tsx
  useSessionManager.tsx
  useTestGeneration.tsx
index.tsx

================================================================
Repository Files
================================================================

================
File: components/CodeEditor.tsx
================
import { Button } from '@/components/ui/button';
import CodeEditor from '@/components/CodeEditor/CodeEditor';
import LanguageDropdown from './LanguageDropdown';
import { LanguageDrop } from './LanguageDropdown';


interface CodeEditorSectionProps {
    language: string;
    code: string;
    isCompiling: boolean;
    handleLanguageSelect: (language: LanguageDrop) => void;
    onCodeChange: (code: string) => void;
    onRun: () => void;
    makeTests: () => void;
}


export const CodeEditorSection = ({
    language,
    code,
    handleLanguageSelect,
    isCompiling,
    onCodeChange,
    onRun,
    makeTests
}: CodeEditorSectionProps) => {

    return (
        <div className="flex flex-col h-full">
            <div className="flex items-center justify-between px-4 py-2 border-b bg-white dark:bg-neutral-900">
                <LanguageDropdown language={language} onSelect={handleLanguageSelect}/>
                <div className="flex gap-2">
                    <Button
                        onClick={onRun}
                        disabled={isCompiling}
                        className="bg-green-600 hover:bg-green-700 text-white"
                        size="sm"
                    >
                        Run
                    </Button>
                    <Button
                        onClick={makeTests}
                        variant="outline"
                        size="sm"
                    >
                        Generate Tests
                    </Button>
                </div>
            </div>
            <div className="flex-1">
                <CodeEditor
                    language={language}
                    code={code}
                    onChange={onCodeChange}
                />
            </div>
        </div>
    );
};

================
File: components/CompilerOutput.tsx
================
import { ChevronDown, ChevronUp, X } from 'lucide-react';
import CompilerCode from '@/components/CompileCode/CompileCode';
import { Button } from '@/components/ui/button';
import { cn } from '@/lib/utils';

interface CompilerOutputProps {
    output: string;
    isExpanded: boolean;
    onToggle: () => void;
}

export const CompilerOutput = ({ output, isExpanded, onToggle }: CompilerOutputProps) => {
    return (
        <div className={cn(
            "border-t border-neutral-800 bg-neutral-100 transition-all duration-200",
            isExpanded ? "h-[300px]" : "h-[40px]"
        )}>
            <div className="flex items-center justify-between px-4 py-2 border-b border-neutral-800">
                <div className="flex items-center gap-2">
                    <Button
                        variant="ghost"
                        size="icon"
                        className="h-6 w-6"
                        onClick={onToggle}
                    >
                        {isExpanded ?
                            <ChevronDown className="h-4 w-4" /> :
                            <ChevronUp className="h-4 w-4" />
                        }
                    </Button>
                    <span className="text-sm text-neutral-400 font-mono">Compiler output</span>
                </div>
            </div>
            {isExpanded && (
                <div className="h-[calc(100%-40px)]">
                    <CompilerCode compilerOutput={output} />
                </div>
            )}
        </div>
    );
};

================
File: components/LanguageDropdown.tsx
================
import { useState, useEffect } from 'react';
import { ChevronDown, Check } from 'lucide-react';
import { Language } from '@/types/types';

export interface LanguageDrop {
  id: Language | undefined;
  name: string;
  icon?: string;
}

export interface LanguageDropdownProps {
  language?: string;
  onSelect?: (language: LanguageDrop) => void;
}

const languages: LanguageDrop[] = [
  { id: undefined, name: 'Find Language' },
  { id: Language.python, name: 'Python' },
  { id: Language.c, name: 'C' },
  { id: Language.bash, name: 'Bash' },
  { id: Language.java, name: 'Java' },
];

const LanguageDropdown: React.FC<LanguageDropdownProps> = ({
  language,
  onSelect,
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const [selectedLanguage, setSelectedLanguage] = useState<LanguageDrop>(() => {
    return languages.find(lang => lang.id === language) || languages[0];
  });

  // Update selected language when prop changes
  useEffect(() => {
    const newLanguage = languages.find(lang => lang.id === language);
    if (newLanguage) {
      setSelectedLanguage(newLanguage);
    }
  }, [language]);

  const handleSelect = (language: LanguageDrop) => {
    if (language.id === undefined) return;
    setSelectedLanguage(language);
    setIsOpen(false);
    onSelect?.(language);
  };

  return (
    <div className="relative w-64">
      {/* Selected Language Button */}
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="w-full flex items-center justify-between px-4 py-2 bg-white border border-gray-300 rounded-lg shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500"
      >
        <span className="text-gray-700">{selectedLanguage.name}</span>
        <ChevronDown
          className={`w-5 h-5 text-gray-500 transition-transform duration-200 ${
            isOpen ? 'transform rotate-180' : ''
          }`}
        />
      </button>

      {/* Dropdown Menu */}
      {isOpen && (
        <div className="absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-lg shadow-lg">
          <ul className="py-1 max-h-60 overflow-auto">
            {languages.map((language) => (
              <li key={language.id}>
                <button
                  onClick={() => handleSelect(language)}
                  className="w-full px-4 py-2 text-left flex items-center justify-between hover:bg-gray-100 focus:outline-none focus:bg-gray-100"
                >
                  <span className="text-gray-700">{language.name}</span>
                  {selectedLanguage.id === language.id && (
                    <Check className="w-4 h-4 text-blue-500" />
                  )}
                </button>
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
};

export default LanguageDropdown;

================
File: components/LoadingState.tsx
================
import { Skeleton } from "@/components/ui/skeleton";
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";

export const LoadingState = () => {
    return (
        <div className="flex flex-col h-full">
            {/* Main content */}
            <div className="grid grid-cols-2 divide-x divide-neutral-800 bg-neutral-100 h-[calc(100%-300px)]">
                {/* Left side */}
                <div className="flex flex-col h-full">
                    {/* Tabs and content */}
                    <div className="flex-1 min-h-0">
                        <div className="flex justify-between items-center border-b border-neutral-800 px-2">
                            <Tabs>
                                <TabsList className="rounded-none border-0 bg-transparent h-10">
                                    <TabsTrigger
                                        value="document"
                                        className="rounded-none data-[state=active]:border-b-2 data-[state=active]:border-primary"
                                        disabled
                                    >
                                        Document viewer
                                    </TabsTrigger>
                                    <TabsTrigger
                                        value="problem"
                                        className="rounded-none data-[state=active]:border-b-2 data-[state=active]:border-primary"
                                        disabled
                                    >
                                        Problem
                                    </TabsTrigger>
                                </TabsList>
                            </Tabs>
                            <div className="flex gap-1 p-1">
                                <Skeleton className="h-8 w-8 rounded" />
                                <Skeleton className="h-8 w-8 rounded" />
                                <Skeleton className="h-8 w-8 rounded" />
                            </div>
                        </div>
                        <div className="p-4">
                            <Skeleton className="w-full h-[calc(100vh-500px)] rounded-lg" />
                        </div>
                    </div>
                </div>

                {/* Right side - Code Editor */}
                <div className="h-full">
                    <div className="flex flex-col h-full">
                        <div className="flex items-center justify-between px-4 py-2 border-b border-neutral-800">
                            <Skeleton className="h-4 w-[100px]" />
                            <div className="flex gap-2">
                                <Skeleton className="h-8 w-16" />
                                <Skeleton className="h-8 w-24" />
                            </div>
                        </div>
                        <div className="flex-1 p-4">
                            <Skeleton className="w-full h-full" />
                        </div>
                    </div>
                </div>
            </div>

            {/* Compiler Output */}
            <div className="h-[300px] border-t border-neutral-800 bg-[#1e1e1e]">
                <div className="flex items-center justify-between px-4 py-2 border-b border-neutral-800">
                    <div className="flex items-center gap-2">
                        <Skeleton className="h-6 w-6" />
                        <Skeleton className="h-4 w-[120px]" />
                    </div>
                    <Skeleton className="h-6 w-6" />
                </div>
                <div className="p-4">
                    <Skeleton className="w-full h-[230px]" />
                </div>
            </div>
        </div>
    );
};

================
File: components/TabView.tsx
================
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs";
import { Button } from "@/components/ui/button";
import { ZoomIn, ZoomOut, Maximize2 } from "lucide-react";
import { useState } from "react";

interface TabViewProps {
    imageUrl: string;
    problemStatement?: string;
}

export const TabView = ({ imageUrl, problemStatement }: TabViewProps) => {
    const [zoom, setZoom] = useState(1);

    return (
        <Tabs defaultValue="document" className="flex-1 bg-white flex flex-col h-full">
            <div className="flex justify-between items-center border-b shrink-0">
                <TabsList className="rounded-none border-0 bg-transparent h-[49px]">
                    <TabsTrigger
                        value="document"
                        className="rounded-none data-[state=active]:border-b-2 data-[state=active]:border-primary"
                    >
                        Document viewer
                    </TabsTrigger>
                    <TabsTrigger
                        value="problem"
                        className="rounded-none data-[state=active]:border-b-2 data-[state=active]:border-primary"
                    >
                        Problem
                    </TabsTrigger>
                </TabsList>
                <div className="flex gap-1 p-1">
                    <Button
                        variant="ghost"
                        size="icon"
                        onClick={() => setZoom(Math.max(0.1, zoom - 0.1))}
                    >
                        <ZoomOut className="h-4 w-4" />
                    </Button>
                    <Button
                        variant="ghost"
                        size="icon"
                        onClick={() => setZoom(Math.min(2, zoom + 0.1))}
                    >
                        <ZoomIn className="h-4 w-4" />
                    </Button>
                    <Button variant="ghost" size="icon" onClick={() => setZoom(1)}>
                        <Maximize2 className="h-4 w-4" />
                    </Button>
                </div>
            </div>
            <TabsContent
                value="document"
                className="flex-1 m-0 overflow-auto"
            >
                {imageUrl && (
                    <div className="w-full h-full flex items-center justify-center p-4">
                        <div className="relative max-w-full max-h-full">
                            <img
                                src={imageUrl}
                                alt="Code"
                                className="max-w-full max-h-[calc(100vh-400px)] object-contain transition-transform duration-200"
                                style={{ transform: `scale(${zoom})`, transformOrigin: 'center' }}
                            />
                        </div>
                    </div>
                )}
            </TabsContent>
            <TabsContent
                value="problem"
                className="flex-1 m-0 p-4 overflow-auto"
            >
                <div className="prose dark:prose-invert max-w-none">
                    {problemStatement || "No problem statement available."}
                </div>
            </TabsContent>
        </Tabs>
    );
};

================
File: hooks/useCompiler.tsx
================
import { useState } from 'react';
import { useMutation } from '@tanstack/react-query';
import { Language } from '@/types/types';

interface CompileResponse {
    stdout: string;
    stderr: string;
    error?: string;
    success: boolean;
}
interface CompileInput {
    code: string;
    language: Language | string;
}

export const useCompiler = () => {
    const [compilerOutput, setCompilerOutput] = useState<string>("");
    const [isCompiling, setIsCompiling] = useState<boolean>(false);
    const [isCompilerExpanded, setIsCompilerExpanded] = useState(true);
    const apiUrl = import.meta.env.VITE_API_URL;

    const compileMutation = useMutation({
        mutationFn: async ({ code, language }: CompileInput) => {
            const response = await fetch(apiUrl + 'compile', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ code, language })
            });
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            return response.json() as Promise<CompileResponse>;
        },
        onMutate: () => {
            setIsCompiling(true);
        },
        onSuccess: (data) => {
            console.log(data);
            if (data['success'] == true) {
                setCompilerOutput(data.stdout);
            } else if (data['success'] == false) {
                console.log("TEST");
                setCompilerOutput(data.error!);
            } 
            else {
                const commaIndex = data.stderr.indexOf(",");
                const rest = commaIndex !== -1 ? data.stderr.substring(commaIndex + 1).trim() : "";
                setCompilerOutput(rest.trim() || "Compilation error occurred");
            }
        },
        onError: (error) => {
            console.error('Error compiling code:', error);
            setCompilerOutput("An error occurred while compiling.");
        },
        onSettled: () => {
            setIsCompiling(false);
        }
    });

    return {
        compilerOutput,
        isCompiling,
        isCompilerExpanded,
        setIsCompilerExpanded,
        setCompilerOutput,
        compile: compileMutation.mutate
    };
};

================
File: hooks/useImageProcessing.tsx
================
import { useState, useEffect } from 'react';
import { useMutation } from '@tanstack/react-query';
import { Session, UpdateSessionInput } from '@/types/types';
import { supabase } from '@/supabaseClient';

interface UseImageProcessingProps {
    session: Session | undefined;
    sessionImage: any;
    onCodeDetected: (code: string) => void;
    onUpdateSession: (updates: Partial<Omit<UpdateSessionInput, 'id'>>) => Promise<any>;
}

export const useImageProcessing = ({
    session,
    sessionImage,
    onCodeDetected,
    onUpdateSession
}: UseImageProcessingProps) => {
    const [imageUrl, setImageUrl] = useState<string>("");
    const apiUrl = import.meta.env.VITE_API_URL;
    const processImageMutation = useMutation({
        // TODO - Live URL

        mutationFn: async (imgUrl: string) => {
            const response = await fetch(apiUrl + 'imgtocode', {
                method: 'POST',
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ img_url: imgUrl })
            });
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            return response.json();
        },
        onSuccess: async (data) => {
            await onUpdateSession({
                code: data.code,
                detected_code: data.code,
                language: data.language,
                status: 'completed'
            });
            onCodeDetected(data.code);
        },
        onError: (error) => {
            console.error('Error processing image:', error);
            onUpdateSession({ status: 'failed' });
        }
    });

    useEffect(() => {
        const getSignedUrl = async () => {
            if (!sessionImage || !session?.user_id) return;

            const filePath = `${session.user_id}/${sessionImage.id}.${sessionImage.ext}`;
            const { data: urlData, error: urlError } = await supabase
                .storage
                .from('code-images')
                .createSignedUrl(filePath, 3600);

            if (urlError) {
                console.error('Error getting signed URL:', urlError);
                return;
            }

            if (urlData?.signedUrl) {
                setImageUrl(urlData.signedUrl);
            }
        };

        getSignedUrl();
    }, [sessionImage, session?.user_id]);

    useEffect(() => {
        if (imageUrl && session?.status === 'pending') {
            processImageMutation.mutate(imageUrl);
        }
    }, [imageUrl, session?.status]);

    return { imageUrl };
};

================
File: hooks/useSessionManager.tsx
================
import { useState } from 'react';
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { updateSession } from '@/api';
import { Session, UpdateSessionInput } from '@/types/types';

export const useSessionManager = (sessionId: string) => {
    const queryClient = useQueryClient();
    const [editorCode, setEditorCode] = useState<string>("");

    const updateSessionMutation = useMutation({
        mutationFn: async (updates: Partial<Omit<UpdateSessionInput, 'id'>>) => {
            const updateData: UpdateSessionInput = {
                id: sessionId,
                ...updates
            };
            return updateSession(updateData);
        },
        onMutate: async (newData) => {
            await queryClient.cancelQueries({ queryKey: ['sessions', sessionId] });
            const previousSession = queryClient.getQueryData<Session>(['sessions', sessionId]);

            queryClient.setQueryData<Session>(['sessions', sessionId], old => ({
                ...old!,
                ...newData
            }));

            return { previousSession };
        },
        onError: (err, newData, context) => {
            queryClient.setQueryData(['sessions', sessionId], context?.previousSession);
            console.error('Failed to update session:', err);
        },
        onSettled: () => {
            queryClient.invalidateQueries({ queryKey: ['sessions', sessionId] });
        }
    });

    return {
        editorCode,
        setEditorCode,
        // The mutation async function is passed directly
        updateSession: updateSessionMutation.mutateAsync
    };
};

================
File: hooks/useTestGeneration.tsx
================
import { Language } from '@/types/types';

interface UseTestGenerationProps {
    apiUrl: string;
    onNewCode: (code: string) => void;
}

export const useTestGeneration = ({ apiUrl, onNewCode }: UseTestGenerationProps) => {
    const generateTests = async (code: string, language: Language) => {
        try {
            const response = await fetch(`${apiUrl}generatetests`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    code,
                    language: language.toLowerCase(),
                }),
            });

            if (!response.ok) {
                throw new Error('Failed to generate tests');
            }

            const data = await response.json();
            console.log(data);
            onNewCode(data.code);
        } catch (error) {
            console.error('Error generating tests:', error);
            throw error;
        }
    };

    return { generateTests };
};

================
File: index.tsx
================
import { useSession, useSessionImage } from "@/api";
import { cn } from "@/lib/utils";
import { useEffect } from "react";
import { useParams } from "react-router-dom";
import { CodeEditorSection } from "./components/CodeEditor";
import { CompilerOutput } from "./components/CompilerOutput";
import { LoadingState } from "./components/LoadingState";
import { TabView } from "./components/TabView";
import { useSessionManager } from "./hooks/useSessionManager";
import { Language } from "@/types/types";
import { useCompiler } from "./hooks/useCompiler";
import { useImageProcessing } from "./hooks/useImageProcessing";
import { useTestGeneration } from "./hooks/useTestGeneration";
import { LanguageDrop } from "./components/LanguageDropdown";

const SessionDashboard = () => {
  const { sessionId } = useParams<{ sessionId: string }>();
  const apiUrl = import.meta.env.VITE_API_URL;

  const {
    data: session,
    isLoading: isSessionLoading,
    error: sessionError
  } = useSession(sessionId!);

  const {
    data: sessionImage,
    isLoading: isImageLoading,
    error: imageError
  } = useSessionImage(sessionId!);

  const {
    editorCode,
    setEditorCode,
    updateSession
  } = useSessionManager(sessionId!);

  const {
    compilerOutput,
    isCompiling,
    isCompilerExpanded,
    setIsCompilerExpanded,
    compile
  } = useCompiler();

  const { imageUrl } = useImageProcessing({
    session,
    sessionImage,
    onCodeDetected: setEditorCode,
    onUpdateSession: updateSession
  });

  const { generateTests } = useTestGeneration({
    apiUrl,
    onNewCode: setEditorCode
  });

  // Effects
  useEffect(() => {
    if (session?.code && !editorCode) {
        console.log('Setting editor code:', session.code);
      setEditorCode(session.code);
    }
  }, [session, setEditorCode]);

  // Event handlers
  const handleMakeTests = async () => {
    console.log('Generating tests...');
    if (!session?.language) return;
    try {
      await generateTests(editorCode, session.language as Language);
    } catch (error) {
      console.error('Failed to generate tests:', error);
    }
  };

  const handleRunClick = () => { 
    compile({
      code: editorCode,
      language: session?.language || Language.python
    });
  };

  const handleLanguageChange = (language: LanguageDrop) => {
    console.log('Language selected in grandparent:', language);
    updateSession({language: language.id }); // Update state or handle as needed
  };

  // Loading state
  if (isSessionLoading || isImageLoading) {
    return <LoadingState />;
  }

  return (
    <div className="flex flex-col h-full">
      <div className={cn(
        "grid grid-cols-2 divide-x divide-gray-200 transition-all duration-200",
        isCompilerExpanded ? 'h-[calc(100%-300px)]' : 'h-[calc(100%-40px)]'
      )}>
        <div className="flex flex-col h-full">
          <div className="flex-1 min-h-0 overflow-hidden">
            <TabView
              imageUrl={imageUrl}
              problemStatement={"MOCK DATA"}
            />
          </div>
        </div>
        <div className="h-full overflow-hidden">
          <CodeEditorSection
            handleLanguageSelect={handleLanguageChange} // Add this line
            language={session?.language || 'Upload to detect language'}
            code={editorCode}
            isCompiling={isCompiling}
            onCodeChange={setEditorCode}
            onRun={handleRunClick}
            makeTests={handleMakeTests}
          />
        </div>
      </div>
      <CompilerOutput
        output={compilerOutput}
        isExpanded={isCompilerExpanded}
        onToggle={() => setIsCompilerExpanded(!isCompilerExpanded)}
      />
    </div>
  );

};

export default SessionDashboard;
